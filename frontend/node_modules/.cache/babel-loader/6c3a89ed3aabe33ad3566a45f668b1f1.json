{"ast":null,"code":"var _jsxFileName = \"/Users/letiescanciano/Desktop/MITxPRO/trackex-app/live-session/src/components/Transactions/List/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Button from \"@material-ui/core/Button\";\nimport Input from \"@material-ui/core/Input\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { transactionsAPI } from \"../../../services/transactions\";\nimport { TransactionDrawer } from \"../../Drawer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = styled.table`\n  width: 80%;\n  text-align: left;\n  padding: 16px 0;\n`;\n_c = Table;\nconst HeadCell = styled.td`\n  padding: 16px 0;\n  width: 20%;\n`;\n_c2 = HeadCell;\nconst TableCell = styled.td`\n  padding: 8px 0;\n  width: 23%;\n  &(:last-of-type) {\n    display: flex;\n    justify-content: flex-end;\n    width: 8%;\n  }\n`;\n_c3 = TableCell;\nconst Amount = styled.p`\n  color: ${({\n  type\n}) => type === \"expense\" ? \"#FF7661\" : \"#00E4C6\"};\n`;\n_c4 = Amount;\nconst Container = styled.div`\n  width: 100%;\n  padding: 64px;\n`;\n_c5 = Container;\nconst ActionsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n_c6 = ActionsWrapper;\nconst Main = styled.div`\n  width: 100%;\n  display: flex;\n  padding-top: 32px;\n`;\n_c7 = Main;\nconst FiltersContainer = styled.div`\n  width: 20%;\n`;\n_c8 = FiltersContainer;\nconst AVAILABLE_MODES = {\n  add: \"add\",\n  edit: \"edit\",\n  read: \"read\"\n};\nconst availableCategories = [{\n  value: \"eating_out\",\n  label: \"Eating out\"\n}, {\n  value: \"clothes\",\n  label: \"Clothes\"\n}, {\n  value: \"electronics\",\n  label: \"Electronics\"\n}, {\n  value: \"groceries\",\n  label: \"Groceries\"\n}, {\n  value: \"other\",\n  label: \"Other\"\n}, {\n  value: \"salary\",\n  label: \"Salary\"\n}];\nconst availableTypes = [{\n  value: \"expense\",\n  label: \"Expense\"\n}, {\n  value: \"income\",\n  label: \"Income\"\n}]; // const TRANSACTIONS_LIST_QUERY = gql`\n//   query {\n//     transactions {\n//       id\n//       name\n//       amount\n//       date\n//       category {\n//         id\n//         label\n//         value\n//       }\n//       type {\n//         id\n//         label\n//         value\n//       }\n//     }\n//   }\n// `;\n\nconst TransactionsList = () => {\n  _s();\n\n  // const { loading, error, data } = useQuery(TRANSACTIONS_LIST_QUERY);\n  // console.log(\"data\", data);\n  // console.log(\"loading\", loading);\n  // console.log(\"error\", error);\n  const [transactions, setTransactions] = useState([]);\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const [mode, setMode] = useState(\"add\");\n  const [selectedTransaction, setSelectedTransaction] = useState({});\n  const [search, setSearch] = useState(\"\");\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n  const [categories, setCategories] = useState(availableCategories.reduce((acc, category) => {\n    acc[category.value] = {\n      label: category.label,\n      checked: false\n    };\n    return acc;\n  }, {})); // {\n  //   eating_out: { label: 'label1', checked: true},\n  //   clothes: { label: 'label1', checked: true},\n  // }\n\n  const [types, setTypes] = useState(availableTypes.reduce((acc, type) => {\n    acc[type.value] = {\n      label: type.label,\n      checked: false\n    };\n    return acc;\n  }, {}));\n  useEffect(() => {\n    const getTransactions = async () => {\n      try {\n        const {\n          data,\n          status\n        } = await transactionsAPI.all();\n\n        if (status === 200) {\n          console.log(\"data\", data); //everything went fine\n\n          setTransactions(data);\n        }\n      } catch (e) {\n        console.log(\"err in read all\", e);\n      }\n    };\n\n    getTransactions();\n  }, []);\n  useEffect(() => {\n    setFilteredTransactions(transactions);\n  }, [transactions]);\n  useEffect(() => {\n    console.log(\"useEffect search\", search);\n    filterByName(search);\n  }, [search]);\n  useEffect(() => {\n    console.log(\"useEffect categories\", categories);\n    filterByCategory();\n  }, [categories]);\n  useEffect(() => {\n    console.log(\"useEffect types\", types);\n    filterByType();\n  }, [types]);\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2\n  });\n\n  const handleDelete = id => {\n    const _transactions = [...transactions].filter(transaction => transaction.id !== id);\n\n    setTransactions(_transactions);\n  };\n\n  const handleEdit = id => {\n    //in here we'll edit the selected transaction\n    console.log(\"edit id\", id); // 1. set mode to Edit\n\n    setMode(\"edit\"); // 2. I need to find the selected transaction in my transactions array\n\n    const foundTransaction = transactions.find(transaction => {\n      return transaction.id === id;\n    }); // 3. I need to setSelectedTransaction to the one I found (save it in my state)\n\n    setSelectedTransaction(foundTransaction); // 4. open the drawer and fill out the form with the transaction data\n\n    setOpenDrawer(true);\n  };\n\n  const addTransactionToList = async newTransaction => {\n    console.log(\"newTransaction\", newTransaction);\n\n    try {\n      const {\n        data,\n        status\n      } = await transactionsAPI.create(newTransaction);\n      console.log(\"status\", status);\n      console.log(\"data\", data);\n\n      if (status === 200) {\n        setTransactions([...transactions, { ...data\n        }]);\n      }\n    } catch (err) {\n      console.log(\"err in addTransaction\", err);\n    } // setTransactions([...transactions, { ...newTransaction }]);\n\n  };\n\n  const editTransaction = data => {\n    // console.log(\"data\", data);\n    // 1. Find the transaction index to edit in the array\n    const transactionIndex = transactions.findIndex(transaction => transaction.id === data.id); // 2. Make a copy of our transactions state\n\n    const _transactions = [...transactions]; // 3. Replace the transaction that we need to edit\n\n    _transactions[transactionIndex] = data; // console.log(\"_transactions\", _transactions);\n    // 4. Update our transactions (state) array\n\n    setTransactions(_transactions);\n  };\n\n  const filterByName = search => {\n    console.log(\"filterByName search\", search);\n\n    const _filteredTransactions = transactions.filter(transaction => {\n      return transaction.name.toLowerCase().includes(search.toLowerCase());\n    });\n\n    setFilteredTransactions(_filteredTransactions);\n  };\n\n  const filterByCategory = () => {\n    // we filter in our categories state object\n    // const checked = Object.keys(categories).filter(category=>{\n    //   return categories[category].checked === true\n    // })\n    const checked = Object.keys(categories).filter(category => categories[category].checked); // if no checkbox is selected --> original array\n    // if some checkbox is checked --> filter\n\n    if (checked.length === 0) {\n      // console.log(\"go back to original array\");\n      setFilteredTransactions(transactions);\n    } else {\n      const _filteredTransactions = transactions.filter(transaction => {\n        return categories[transaction.category].checked === true;\n      });\n\n      setFilteredTransactions(_filteredTransactions); // console.log(\"_filteredTransactions\", _filteredTransactions);\n    }\n  };\n\n  const filterByType = () => {\n    // we filter in our types state object\n    const checked = Object.keys(types).filter(type => types[type].checked); // if no checkbox is selected --> original array\n    // if some checkbox is checked --> filter\n\n    if (checked.length === 0) {\n      // console.log(\"go back to original array\");\n      setFilteredTransactions(transactions);\n    } else {\n      const _filteredTransactions = transactions.filter(transaction => {\n        return types[transaction.type].checked === true;\n      });\n\n      setFilteredTransactions(_filteredTransactions); // console.log(\"_filteredTransactions\", _filteredTransactions);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(ActionsWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        style: {\n          width: \"75%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          id: \"search\",\n          value: search,\n          startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"start\",\n            children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this),\n          onChange: event => {\n            console.log(event.target.value);\n            setSearch(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => setOpenDrawer(true),\n        children: \"+ Add Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Main, {\n      children: [/*#__PURE__*/_jsxDEV(FiltersContainer, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Filters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), categories && Object.keys(categories).map(category => {\n          return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: categories[category].checked,\n              onChange: event => {\n                const newCategoriesState = { ...categories,\n                  // make a copy of all the categories\n                  [category]: { //label: categories[category].label,\n                    ...categories[category],\n                    // we keep all the information of that category\n                    checked: event.target.checked // we update the \"checked\" property\n\n                  }\n                }; // console.log(\"newCategoriesState\", newCategoriesState);\n\n                setCategories(newCategoriesState);\n              },\n              name: category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 21\n            }, this),\n            label: categories[category].label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Types\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this), types && Object.keys(types).map(type => {\n          return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: types[type].checked,\n              onChange: event => {\n                const newTypesState = { ...types,\n                  // make a copy of all the Types\n                  [type]: { //label: Types[type].label,\n                    ...types[type],\n                    // we keep all the information of that type\n                    checked: event.target.checked // we update the \"checked\" property\n\n                  }\n                };\n                console.log(\"newTypesState\", newTypesState);\n                setTypes(newTypesState);\n              },\n              name: type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 21\n            }, this),\n            label: types[type].label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), transactions.length > 0 ? /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(HeadCell, {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(HeadCell, {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(HeadCell, {\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(HeadCell, {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(HeadCell, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: filteredTransactions.map(({\n            id,\n            date,\n            name,\n            category,\n            type,\n            amount\n          }) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: category.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Amount, {\n                  type: type.value,\n                  children: formatter.format(amount)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 385,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: [/*#__PURE__*/_jsxDEV(EditIcon, {\n                  style: {\n                    marginRight: \"16px\"\n                  },\n                  onClick: () => {\n                    handleEdit(id);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(DeleteForeverIcon, {\n                  style: {\n                    color: \"#FF7661\"\n                  },\n                  onClick: () => handleDelete(id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 23\n              }, this)]\n            }, id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 11\n      }, this) : \"Loading....\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), openDrawer && /*#__PURE__*/_jsxDEV(TransactionDrawer, {\n      mode: mode,\n      open: openDrawer,\n      onClose: () => setOpenDrawer(false),\n      transaction: selectedTransaction,\n      addTransaction: addTransactionToList,\n      editTransaction: editTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionsList, \"7HoiTT/W0BeV0yiLOYGaTE5QMAM=\");\n\n_c9 = TransactionsList;\nexport { TransactionsList };\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n\n$RefreshReg$(_c, \"Table\");\n$RefreshReg$(_c2, \"HeadCell\");\n$RefreshReg$(_c3, \"TableCell\");\n$RefreshReg$(_c4, \"Amount\");\n$RefreshReg$(_c5, \"Container\");\n$RefreshReg$(_c6, \"ActionsWrapper\");\n$RefreshReg$(_c7, \"Main\");\n$RefreshReg$(_c8, \"FiltersContainer\");\n$RefreshReg$(_c9, \"TransactionsList\");","map":{"version":3,"sources":["/Users/letiescanciano/Desktop/MITxPRO/trackex-app/live-session/src/components/Transactions/List/index.jsx"],"names":["React","useState","useEffect","styled","useQuery","gql","DeleteForeverIcon","EditIcon","Button","Input","InputAdornment","FormControl","SearchIcon","FormControlLabel","Checkbox","transactionsAPI","TransactionDrawer","Table","table","HeadCell","td","TableCell","Amount","p","type","Container","div","ActionsWrapper","Main","FiltersContainer","AVAILABLE_MODES","add","edit","read","availableCategories","value","label","availableTypes","TransactionsList","transactions","setTransactions","openDrawer","setOpenDrawer","mode","setMode","selectedTransaction","setSelectedTransaction","search","setSearch","filteredTransactions","setFilteredTransactions","categories","setCategories","reduce","acc","category","checked","types","setTypes","getTransactions","data","status","all","console","log","e","filterByName","filterByCategory","filterByType","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","handleDelete","id","_transactions","filter","transaction","handleEdit","foundTransaction","find","addTransactionToList","newTransaction","create","err","editTransaction","transactionIndex","findIndex","_filteredTransactions","name","toLowerCase","includes","Object","keys","length","width","event","target","map","newCategoriesState","newTypesState","date","amount","format","marginRight","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport styled from \"styled-components\";\n\nimport { useQuery, gql } from \"@apollo/client\";\n\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Button from \"@material-ui/core/Button\";\n\nimport Input from \"@material-ui/core/Input\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nimport { transactionsAPI } from \"../../../services/transactions\";\n\nimport { TransactionDrawer } from \"../../Drawer\";\nconst Table = styled.table`\n  width: 80%;\n  text-align: left;\n  padding: 16px 0;\n`;\nconst HeadCell = styled.td`\n  padding: 16px 0;\n  width: 20%;\n`;\n\nconst TableCell = styled.td`\n  padding: 8px 0;\n  width: 23%;\n  &(:last-of-type) {\n    display: flex;\n    justify-content: flex-end;\n    width: 8%;\n  }\n`;\n\nconst Amount = styled.p`\n  color: ${({ type }) => (type === \"expense\" ? \"#FF7661\" : \"#00E4C6\")};\n`;\n\nconst Container = styled.div`\n  width: 100%;\n  padding: 64px;\n`;\n\nconst ActionsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Main = styled.div`\n  width: 100%;\n  display: flex;\n  padding-top: 32px;\n`;\nconst FiltersContainer = styled.div`\n  width: 20%;\n`;\n\nconst AVAILABLE_MODES = {\n  add: \"add\",\n  edit: \"edit\",\n  read: \"read\",\n};\n\nconst availableCategories = [\n  { value: \"eating_out\", label: \"Eating out\" },\n  { value: \"clothes\", label: \"Clothes\" },\n  { value: \"electronics\", label: \"Electronics\" },\n  { value: \"groceries\", label: \"Groceries\" },\n  { value: \"other\", label: \"Other\" },\n  { value: \"salary\", label: \"Salary\" },\n];\n\nconst availableTypes = [\n  { value: \"expense\", label: \"Expense\" },\n  { value: \"income\", label: \"Income\" },\n];\n\n// const TRANSACTIONS_LIST_QUERY = gql`\n//   query {\n//     transactions {\n//       id\n//       name\n//       amount\n//       date\n//       category {\n//         id\n//         label\n//         value\n//       }\n//       type {\n//         id\n//         label\n//         value\n//       }\n//     }\n//   }\n// `;\nconst TransactionsList = () => {\n  // const { loading, error, data } = useQuery(TRANSACTIONS_LIST_QUERY);\n  // console.log(\"data\", data);\n  // console.log(\"loading\", loading);\n  // console.log(\"error\", error);\n\n  const [transactions, setTransactions] = useState([]);\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const [mode, setMode] = useState(\"add\");\n  const [selectedTransaction, setSelectedTransaction] = useState({});\n  const [search, setSearch] = useState(\"\");\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n\n  const [categories, setCategories] = useState(\n    availableCategories.reduce((acc, category) => {\n      acc[category.value] = { label: category.label, checked: false };\n      return acc;\n    }, {})\n  );\n\n  // {\n  //   eating_out: { label: 'label1', checked: true},\n  //   clothes: { label: 'label1', checked: true},\n  // }\n  const [types, setTypes] = useState(\n    availableTypes.reduce((acc, type) => {\n      acc[type.value] = { label: type.label, checked: false };\n      return acc;\n    }, {})\n  );\n\n  useEffect(() => {\n    const getTransactions = async () => {\n      try {\n        const { data, status } = await transactionsAPI.all();\n        if (status === 200) {\n          console.log(\"data\", data);\n          //everything went fine\n          setTransactions(data);\n        }\n      } catch (e) {\n        console.log(\"err in read all\", e);\n      }\n    };\n    getTransactions();\n  }, []);\n\n  useEffect(() => {\n    setFilteredTransactions(transactions);\n  }, [transactions]);\n\n  useEffect(() => {\n    console.log(\"useEffect search\", search);\n    filterByName(search);\n  }, [search]);\n\n  useEffect(() => {\n    console.log(\"useEffect categories\", categories);\n    filterByCategory();\n  }, [categories]);\n\n  useEffect(() => {\n    console.log(\"useEffect types\", types);\n    filterByType();\n  }, [types]);\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2,\n  });\n\n  const handleDelete = (id) => {\n    const _transactions = [...transactions].filter(\n      (transaction) => transaction.id !== id\n    );\n    setTransactions(_transactions);\n  };\n\n  const handleEdit = (id) => {\n    //in here we'll edit the selected transaction\n    console.log(\"edit id\", id);\n    // 1. set mode to Edit\n    setMode(\"edit\");\n    // 2. I need to find the selected transaction in my transactions array\n    const foundTransaction = transactions.find((transaction) => {\n      return transaction.id === id;\n    });\n    // 3. I need to setSelectedTransaction to the one I found (save it in my state)\n    setSelectedTransaction(foundTransaction);\n    // 4. open the drawer and fill out the form with the transaction data\n    setOpenDrawer(true);\n  };\n  const addTransactionToList = async (newTransaction) => {\n    console.log(\"newTransaction\", newTransaction);\n    try {\n      const { data, status } = await transactionsAPI.create(newTransaction);\n      console.log(\"status\", status);\n      console.log(\"data\", data);\n      if (status === 200) {\n        setTransactions([...transactions, { ...data }]);\n      }\n    } catch (err) {\n      console.log(\"err in addTransaction\", err);\n    }\n    // setTransactions([...transactions, { ...newTransaction }]);\n  };\n\n  const editTransaction = (data) => {\n    // console.log(\"data\", data);\n    // 1. Find the transaction index to edit in the array\n    const transactionIndex = transactions.findIndex(\n      (transaction) => transaction.id === data.id\n    );\n    // 2. Make a copy of our transactions state\n    const _transactions = [...transactions];\n    // 3. Replace the transaction that we need to edit\n    _transactions[transactionIndex] = data;\n\n    // console.log(\"_transactions\", _transactions);\n    // 4. Update our transactions (state) array\n    setTransactions(_transactions);\n  };\n\n  const filterByName = (search) => {\n    console.log(\"filterByName search\", search);\n\n    const _filteredTransactions = transactions.filter((transaction) => {\n      return transaction.name.toLowerCase().includes(search.toLowerCase());\n    });\n\n    setFilteredTransactions(_filteredTransactions);\n  };\n\n  const filterByCategory = () => {\n    // we filter in our categories state object\n\n    // const checked = Object.keys(categories).filter(category=>{\n    //   return categories[category].checked === true\n    // })\n    const checked = Object.keys(categories).filter(\n      (category) => categories[category].checked\n    );\n\n    // if no checkbox is selected --> original array\n    // if some checkbox is checked --> filter\n\n    if (checked.length === 0) {\n      // console.log(\"go back to original array\");\n      setFilteredTransactions(transactions);\n    } else {\n      const _filteredTransactions = transactions.filter((transaction) => {\n        return categories[transaction.category].checked === true;\n      });\n      setFilteredTransactions(_filteredTransactions);\n      // console.log(\"_filteredTransactions\", _filteredTransactions);\n    }\n  };\n\n  const filterByType = () => {\n    // we filter in our types state object\n    const checked = Object.keys(types).filter((type) => types[type].checked);\n\n    // if no checkbox is selected --> original array\n    // if some checkbox is checked --> filter\n\n    if (checked.length === 0) {\n      // console.log(\"go back to original array\");\n      setFilteredTransactions(transactions);\n    } else {\n      const _filteredTransactions = transactions.filter((transaction) => {\n        return types[transaction.type].checked === true;\n      });\n      setFilteredTransactions(_filteredTransactions);\n      // console.log(\"_filteredTransactions\", _filteredTransactions);\n    }\n  };\n\n  return (\n    <Container>\n      <ActionsWrapper>\n        <FormControl style={{ width: \"75%\" }}>\n          <Input\n            id='search'\n            value={search}\n            startAdornment={\n              <InputAdornment position='start'>\n                <SearchIcon />\n              </InputAdornment>\n            }\n            onChange={(event) => {\n              console.log(event.target.value);\n              setSearch(event.target.value);\n            }}\n          />\n        </FormControl>\n        <Button\n          variant='contained'\n          color='primary'\n          onClick={() => setOpenDrawer(true)}\n        >\n          + Add Transaction\n        </Button>\n      </ActionsWrapper>\n      <Main>\n        <FiltersContainer>\n          <h2>Filters</h2>\n          <h3>Category</h3>\n          {categories &&\n            Object.keys(categories).map((category) => {\n              return (\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={categories[category].checked}\n                      onChange={(event) => {\n                        const newCategoriesState = {\n                          ...categories, // make a copy of all the categories\n                          [category]: {\n                            //label: categories[category].label,\n                            ...categories[category], // we keep all the information of that category\n                            checked: event.target.checked, // we update the \"checked\" property\n                          },\n                        };\n                        // console.log(\"newCategoriesState\", newCategoriesState);\n                        setCategories(newCategoriesState);\n                      }}\n                      name={category}\n                    />\n                  }\n                  label={categories[category].label}\n                />\n              );\n            })}\n          <h3>Types</h3>\n          {types &&\n            Object.keys(types).map((type) => {\n              return (\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={types[type].checked}\n                      onChange={(event) => {\n                        const newTypesState = {\n                          ...types, // make a copy of all the Types\n                          [type]: {\n                            //label: Types[type].label,\n                            ...types[type], // we keep all the information of that type\n                            checked: event.target.checked, // we update the \"checked\" property\n                          },\n                        };\n                        console.log(\"newTypesState\", newTypesState);\n                        setTypes(newTypesState);\n                      }}\n                      name={type}\n                    />\n                  }\n                  label={types[type].label}\n                />\n              );\n            })}\n        </FiltersContainer>\n        {transactions.length > 0 ? (\n          <Table>\n            <thead>\n              <tr>\n                <HeadCell>Date</HeadCell>\n                <HeadCell>Name</HeadCell>\n                <HeadCell>Category</HeadCell>\n                <HeadCell>Amount</HeadCell>\n                <HeadCell></HeadCell>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredTransactions.map(\n                ({ id, date, name, category, type, amount }) => {\n                  return (\n                    <tr key={id}>\n                      <TableCell>{date}</TableCell>\n                      <TableCell>{name}</TableCell>\n                      <TableCell>{category.value}</TableCell>\n                      <TableCell>\n                        <Amount type={type.value}>\n                          {formatter.format(amount)}\n                        </Amount>\n                      </TableCell>\n                      <TableCell>\n                        <EditIcon\n                          style={{ marginRight: \"16px\" }}\n                          onClick={() => {\n                            handleEdit(id);\n                          }}\n                        />\n                        <DeleteForeverIcon\n                          style={{ color: \"#FF7661\" }}\n                          onClick={() => handleDelete(id)}\n                        />\n                      </TableCell>\n                    </tr>\n                  );\n                }\n              )}\n            </tbody>\n          </Table>\n        ) : (\n          \"Loading....\"\n        )}\n      </Main>\n      {openDrawer && (\n        <TransactionDrawer\n          mode={mode}\n          open={openDrawer}\n          onClose={() => setOpenDrawer(false)}\n          transaction={selectedTransaction}\n          addTransaction={addTransactionToList}\n          editTransaction={editTransaction}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport { TransactionsList };\n"]},"metadata":{},"sourceType":"module"}