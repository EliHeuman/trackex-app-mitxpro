{"ast":null,"code":"var _jsxFileName = \"/Users/letiescanciano/Desktop/MITxPRO/trackex-app/live-session/frontend/src/components/Transactions/List/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { toDate } from \"date-fns\";\nimport styled from \"styled-components\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Button from \"@material-ui/core/Button\";\nimport Input from \"@material-ui/core/Input\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { transactionsAPI } from \"../../../services/transactions\";\nimport { TransactionDrawer } from \"../../Drawer\";\nimport { TrackexContext } from \"../../../trackexContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = styled.table`\n  width: 80%;\n  text-align: left;\n  padding: 16px 0;\n`;\n_c = Table;\nconst HeadCell = styled.td`\n  padding: 16px 0;\n  width: 20%;\n`;\n_c2 = HeadCell;\nconst TableCell = styled.td`\n  padding: 8px 0;\n  width: 23%;\n  &(:last-of-type) {\n    display: flex;\n    justify-content: flex-end;\n    width: 8%;\n  }\n`;\n_c3 = TableCell;\nconst Amount = styled.p`\n  color: ${({\n  type\n}) => type === \"expense\" ? \"#FF7661\" : \"#00E4C6\"};\n`;\n_c4 = Amount;\nconst Container = styled.div`\n  width: 100%;\n  padding: 64px;\n`;\n_c5 = Container;\nconst ActionsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n_c6 = ActionsWrapper;\nconst Main = styled.div`\n  width: 100%;\n  display: flex;\n  padding-top: 32px;\n`;\n_c7 = Main;\nconst FiltersContainer = styled.div`\n  width: 20%;\n`; // const TRANSACTIONS_LIST_QUERY = gql`\n//   query {\n//     transactions {\n//       id\n//       name\n//       amount\n//       date\n//       category {\n//         id\n//         label\n//         value\n//       }\n//       type {\n//         id\n//         label\n//         value\n//       }\n//     }\n//   }\n// `;\n\n_c8 = FiltersContainer;\n\nconst TransactionsList = () => {\n  _s();\n\n  // const { loading, error, data } = useQuery(TRANSACTIONS_LIST_QUERY);\n  // console.log(\"data\", data);\n  // console.log(\"loading\", loading);\n  // console.log(\"error\", error);\n  const [transactions, setTransactions] = useState([]);\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const [mode, setMode] = useState(\"add\");\n  const [selectedTransaction, setSelectedTransaction] = useState({});\n  const [search, setSearch] = useState(\"\");\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n  const ctx = React.useContext(TrackexContext);\n  const [categories, setCategories] = useState(ctx.categories.reduce((acc, category) => {\n    acc[category.value] = {\n      label: category.label,\n      checked: false\n    };\n    return acc;\n  }, {})); // {\n  //   eating_out: { label: 'label1', checked: true},\n  //   clothes: { label: 'label1', checked: true},\n  // }\n\n  const [types, setTypes] = useState(ctx.types.reduce((acc, type) => {\n    acc[type.value] = {\n      label: type.label,\n      checked: false\n    };\n    return acc;\n  }, {}));\n  useEffect(() => {\n    const getTransactions = async () => {\n      try {\n        const {\n          data,\n          status\n        } = await transactionsAPI.all();\n\n        if (status === 200) {\n          setTransactions(data);\n        }\n      } catch (e) {\n        console.log(\"err in read all\", e);\n      }\n    };\n\n    getTransactions();\n  }, []);\n  useEffect(() => {\n    setFilteredTransactions(transactions);\n  }, [transactions]);\n  useEffect(() => {\n    filterByName(search);\n  }, [search]);\n  useEffect(() => {\n    filterByCategory();\n  }, [categories]);\n  useEffect(() => {\n    filterByType();\n  }, [types]);\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2\n  });\n\n  const handleDelete = async id => {\n    try {\n      const {\n        data,\n        status\n      } = await transactionsAPI.delete(id);\n      console.log(\"data\", data);\n      console.log(\"status\", status);\n\n      if (status === 200) {\n        const _transactions = [...transactions].filter(transaction => transaction.id !== id);\n\n        setTransactions(_transactions);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleEdit = id => {\n    //in here we'll edit the selected transaction\n    console.log(\"edit id\", id); // 1. set mode to Edit\n\n    setMode(\"edit\"); // 2. I need to find the selected transaction in my transactions array\n\n    const foundTransaction = transactions.find(transaction => {\n      return transaction.id === id;\n    }); // 3. I need to setSelectedTransaction to the one I found (save it in my state)\n\n    setSelectedTransaction({ ...foundTransaction,\n      type: foundTransaction.type.value,\n      category: foundTransaction.category.value\n    }); // 4. open the drawer and fill out the form with the transaction data\n\n    setOpenDrawer(true);\n  };\n\n  const addTransactionToList = async transaction => {\n    const newTransaction = { ...transaction,\n      category: ctx.categories.find(cat => cat.value === transaction.category),\n      type: ctx.types.find(cat => cat.value === transaction.type)\n    };\n    console.log(newTransaction);\n\n    try {\n      const {\n        data,\n        status\n      } = await transactionsAPI.create(newTransaction); // console.log(\"status\", status);\n\n      console.log(\"data\", data);\n\n      if (status === 201) {\n        setTransactions([...transactions, { ...data\n        }]);\n      }\n    } catch (err) {\n      console.log(\"err in addTransaction\", err);\n    }\n  };\n\n  const editTransaction = async transaction => {\n    console.log(\"transaction\", transaction);\n    const updatedTransaction = { ...transaction,\n      category: ctx.categories.find(cat => cat.value === transaction.category),\n      type: ctx.types.find(cat => cat.value === transaction.type)\n    };\n    console.log(\"updatedTransaction\", updatedTransaction);\n\n    try {\n      const {\n        data,\n        status\n      } = await transactionsAPI.update(updatedTransaction);\n      console.log(\"data\", data);\n      console.log(\"status\", status);\n\n      if (status === 200) {\n        // 1. Find the transaction index to edit in the array\n        const transactionIndex = transactions.findIndex(tr => tr.id === transaction.id); // 2. Make a copy of our transactions state\n\n        const _transactions = [...transactions]; // 3. Replace the transaction that we need to edit\n\n        _transactions[transactionIndex] = data; // console.log(\"_transactions\", _transactions);\n        // 4. Update our transactions (state) array\n\n        setTransactions(_transactions);\n      }\n    } catch (e) {\n      console.log(\"e\", e);\n    }\n  };\n\n  const filterByName = search => {\n    const _filteredTransactions = transactions.filter(transaction => {\n      return transaction.name.toLowerCase().includes(search.toLowerCase());\n    });\n\n    setFilteredTransactions(_filteredTransactions);\n  };\n\n  const filterByCategory = () => {\n    // we filter in our categories state object\n    // const checked = Object.keys(categories).filter(category=>{\n    //   return categories[category].checked === true\n    // })\n    const checked = Object.keys(categories).filter(category => categories[category].checked); // if no checkbox is selected --> original array\n    // if some checkbox is checked --> filter\n\n    if (checked.length === 0) {\n      // console.log(\"go back to original array\");\n      setFilteredTransactions(transactions);\n    } else {\n      const _filteredTransactions = transactions.filter(transaction => {\n        return categories[transaction.category].checked === true;\n      });\n\n      setFilteredTransactions(_filteredTransactions); // console.log(\"_filteredTransactions\", _filteredTransactions);\n    }\n  };\n\n  const filterByType = () => {\n    // we filter in our types state object\n    const checked = Object.keys(types).filter(type => types[type].checked); // if no checkbox is selected --> original array\n    // if some checkbox is checked --> filter\n\n    if (checked.length === 0) {\n      // console.log(\"go back to original array\");\n      setFilteredTransactions(transactions);\n    } else {\n      const _filteredTransactions = transactions.filter(transaction => {\n        return types[transaction.type].checked === true;\n      });\n\n      setFilteredTransactions(_filteredTransactions); // console.log(\"_filteredTransactions\", _filteredTransactions);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(ActionsWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        style: {\n          width: \"75%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          id: \"search\",\n          value: search,\n          startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"start\",\n            children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }, this),\n          onChange: event => {\n            console.log(event.target.value);\n            setSearch(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => setOpenDrawer(true),\n        children: \"+ Add Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Main, {\n      children: [/*#__PURE__*/_jsxDEV(FiltersContainer, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Filters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this), categories && Object.keys(categories).map(category => {\n          return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: categories[category].checked,\n              onChange: event => {\n                const newCategoriesState = { ...categories,\n                  // make a copy of all the categories\n                  [category]: { //label: categories[category].label,\n                    ...categories[category],\n                    // we keep all the information of that category\n                    checked: event.target.checked // we update the \"checked\" property\n\n                  }\n                }; // console.log(\"newCategoriesState\", newCategoriesState);\n\n                setCategories(newCategoriesState);\n              },\n              name: category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 21\n            }, this),\n            label: categories[category].label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Types\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), types && Object.keys(types).map(type => {\n          return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: types[type].checked,\n              onChange: event => {\n                const newTypesState = { ...types,\n                  // make a copy of all the Types\n                  [type]: { //label: Types[type].label,\n                    ...types[type],\n                    // we keep all the information of that type\n                    checked: event.target.checked // we update the \"checked\" property\n\n                  }\n                };\n                console.log(\"newTypesState\", newTypesState);\n                setTypes(newTypesState);\n              },\n              name: type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 21\n            }, this),\n            label: types[type].label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), transactions.length > 0 ? /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(HeadCell, {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(HeadCell, {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(HeadCell, {\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(HeadCell, {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(HeadCell, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: filteredTransactions.map(({\n            id,\n            date,\n            name,\n            category,\n            type,\n            amount\n          }) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: category.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Amount, {\n                  type: type.value,\n                  children: formatter.format(amount)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 397,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: [/*#__PURE__*/_jsxDEV(EditIcon, {\n                  style: {\n                    marginRight: \"16px\"\n                  },\n                  onClick: () => {\n                    handleEdit(id);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(DeleteForeverIcon, {\n                  style: {\n                    color: \"#FF7661\"\n                  },\n                  onClick: () => handleDelete(id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 408,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 23\n              }, this)]\n            }, id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 11\n      }, this) : \"Loading....\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), openDrawer && /*#__PURE__*/_jsxDEV(TransactionDrawer, {\n      mode: mode,\n      open: openDrawer,\n      onClose: () => setOpenDrawer(false),\n      transaction: selectedTransaction,\n      addTransaction: addTransactionToList,\n      editTransaction: editTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 294,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionsList, \"pWD5+NuRONeo6PtgceFAiFgugLs=\");\n\n_c9 = TransactionsList;\nexport { TransactionsList };\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n\n$RefreshReg$(_c, \"Table\");\n$RefreshReg$(_c2, \"HeadCell\");\n$RefreshReg$(_c3, \"TableCell\");\n$RefreshReg$(_c4, \"Amount\");\n$RefreshReg$(_c5, \"Container\");\n$RefreshReg$(_c6, \"ActionsWrapper\");\n$RefreshReg$(_c7, \"Main\");\n$RefreshReg$(_c8, \"FiltersContainer\");\n$RefreshReg$(_c9, \"TransactionsList\");","map":{"version":3,"sources":["/Users/letiescanciano/Desktop/MITxPRO/trackex-app/live-session/frontend/src/components/Transactions/List/index.jsx"],"names":["React","useState","useEffect","toDate","styled","DeleteForeverIcon","EditIcon","Button","Input","InputAdornment","FormControl","SearchIcon","FormControlLabel","Checkbox","transactionsAPI","TransactionDrawer","TrackexContext","Table","table","HeadCell","td","TableCell","Amount","p","type","Container","div","ActionsWrapper","Main","FiltersContainer","TransactionsList","transactions","setTransactions","openDrawer","setOpenDrawer","mode","setMode","selectedTransaction","setSelectedTransaction","search","setSearch","filteredTransactions","setFilteredTransactions","ctx","useContext","categories","setCategories","reduce","acc","category","value","label","checked","types","setTypes","getTransactions","data","status","all","e","console","log","filterByName","filterByCategory","filterByType","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","handleDelete","id","delete","_transactions","filter","transaction","err","handleEdit","foundTransaction","find","addTransactionToList","newTransaction","cat","create","editTransaction","updatedTransaction","update","transactionIndex","findIndex","tr","_filteredTransactions","name","toLowerCase","includes","Object","keys","length","width","event","target","map","newCategoriesState","newTypesState","date","amount","format","marginRight","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { toDate } from \"date-fns\";\nimport styled from \"styled-components\";\n\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Button from \"@material-ui/core/Button\";\n\nimport Input from \"@material-ui/core/Input\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nimport { transactionsAPI } from \"../../../services/transactions\";\n\nimport { TransactionDrawer } from \"../../Drawer\";\n\nimport { TrackexContext } from \"../../../trackexContext\";\nconst Table = styled.table`\n  width: 80%;\n  text-align: left;\n  padding: 16px 0;\n`;\nconst HeadCell = styled.td`\n  padding: 16px 0;\n  width: 20%;\n`;\n\nconst TableCell = styled.td`\n  padding: 8px 0;\n  width: 23%;\n  &(:last-of-type) {\n    display: flex;\n    justify-content: flex-end;\n    width: 8%;\n  }\n`;\n\nconst Amount = styled.p`\n  color: ${({ type }) => (type === \"expense\" ? \"#FF7661\" : \"#00E4C6\")};\n`;\n\nconst Container = styled.div`\n  width: 100%;\n  padding: 64px;\n`;\n\nconst ActionsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Main = styled.div`\n  width: 100%;\n  display: flex;\n  padding-top: 32px;\n`;\nconst FiltersContainer = styled.div`\n  width: 20%;\n`;\n\n// const TRANSACTIONS_LIST_QUERY = gql`\n//   query {\n//     transactions {\n//       id\n//       name\n//       amount\n//       date\n//       category {\n//         id\n//         label\n//         value\n//       }\n//       type {\n//         id\n//         label\n//         value\n//       }\n//     }\n//   }\n// `;\nconst TransactionsList = () => {\n  // const { loading, error, data } = useQuery(TRANSACTIONS_LIST_QUERY);\n  // console.log(\"data\", data);\n  // console.log(\"loading\", loading);\n  // console.log(\"error\", error);\n\n  const [transactions, setTransactions] = useState([]);\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const [mode, setMode] = useState(\"add\");\n  const [selectedTransaction, setSelectedTransaction] = useState({});\n  const [search, setSearch] = useState(\"\");\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n\n  const ctx = React.useContext(TrackexContext);\n  const [categories, setCategories] = useState(\n    ctx.categories.reduce((acc, category) => {\n      acc[category.value] = { label: category.label, checked: false };\n      return acc;\n    }, {})\n  );\n\n  // {\n  //   eating_out: { label: 'label1', checked: true},\n  //   clothes: { label: 'label1', checked: true},\n  // }\n  const [types, setTypes] = useState(\n    ctx.types.reduce((acc, type) => {\n      acc[type.value] = { label: type.label, checked: false };\n      return acc;\n    }, {})\n  );\n\n  useEffect(() => {\n    const getTransactions = async () => {\n      try {\n        const { data, status } = await transactionsAPI.all();\n        if (status === 200) {\n          setTransactions(data);\n        }\n      } catch (e) {\n        console.log(\"err in read all\", e);\n      }\n    };\n    getTransactions();\n  }, []);\n\n  useEffect(() => {\n    setFilteredTransactions(transactions);\n  }, [transactions]);\n\n  useEffect(() => {\n    filterByName(search);\n  }, [search]);\n\n  useEffect(() => {\n    filterByCategory();\n  }, [categories]);\n\n  useEffect(() => {\n    filterByType();\n  }, [types]);\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2,\n  });\n\n  const handleDelete = async (id) => {\n    try {\n      const { data, status } = await transactionsAPI.delete(id);\n      console.log(\"data\", data);\n      console.log(\"status\", status);\n      if (status === 200) {\n        const _transactions = [...transactions].filter(\n          (transaction) => transaction.id !== id\n        );\n        setTransactions(_transactions);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleEdit = (id) => {\n    //in here we'll edit the selected transaction\n    console.log(\"edit id\", id);\n    // 1. set mode to Edit\n    setMode(\"edit\");\n    // 2. I need to find the selected transaction in my transactions array\n    const foundTransaction = transactions.find((transaction) => {\n      return transaction.id === id;\n    });\n    // 3. I need to setSelectedTransaction to the one I found (save it in my state)\n    setSelectedTransaction({\n      ...foundTransaction,\n      type: foundTransaction.type.value,\n      category: foundTransaction.category.value,\n    });\n    // 4. open the drawer and fill out the form with the transaction data\n    setOpenDrawer(true);\n  };\n  const addTransactionToList = async (transaction) => {\n    const newTransaction = {\n      ...transaction,\n      category: ctx.categories.find(\n        (cat) => cat.value === transaction.category\n      ),\n      type: ctx.types.find((cat) => cat.value === transaction.type),\n    };\n    console.log(newTransaction);\n\n    try {\n      const { data, status } = await transactionsAPI.create(newTransaction);\n      // console.log(\"status\", status);\n      console.log(\"data\", data);\n      if (status === 201) {\n        setTransactions([...transactions, { ...data }]);\n      }\n    } catch (err) {\n      console.log(\"err in addTransaction\", err);\n    }\n  };\n\n  const editTransaction = async (transaction) => {\n    console.log(\"transaction\", transaction);\n    const updatedTransaction = {\n      ...transaction,\n      category: ctx.categories.find(\n        (cat) => cat.value === transaction.category\n      ),\n      type: ctx.types.find((cat) => cat.value === transaction.type),\n    };\n    console.log(\"updatedTransaction\", updatedTransaction);\n\n    try {\n      const { data, status } = await transactionsAPI.update(updatedTransaction);\n      console.log(\"data\", data);\n      console.log(\"status\", status);\n      if (status === 200) {\n        // 1. Find the transaction index to edit in the array\n        const transactionIndex = transactions.findIndex(\n          (tr) => tr.id === transaction.id\n        );\n        // 2. Make a copy of our transactions state\n        const _transactions = [...transactions];\n        // 3. Replace the transaction that we need to edit\n        _transactions[transactionIndex] = data;\n\n        // console.log(\"_transactions\", _transactions);\n        // 4. Update our transactions (state) array\n        setTransactions(_transactions);\n      }\n    } catch (e) {\n      console.log(\"e\", e);\n    }\n  };\n\n  const filterByName = (search) => {\n    const _filteredTransactions = transactions.filter((transaction) => {\n      return transaction.name.toLowerCase().includes(search.toLowerCase());\n    });\n\n    setFilteredTransactions(_filteredTransactions);\n  };\n\n  const filterByCategory = () => {\n    // we filter in our categories state object\n\n    // const checked = Object.keys(categories).filter(category=>{\n    //   return categories[category].checked === true\n    // })\n    const checked = Object.keys(categories).filter(\n      (category) => categories[category].checked\n    );\n\n    // if no checkbox is selected --> original array\n    // if some checkbox is checked --> filter\n\n    if (checked.length === 0) {\n      // console.log(\"go back to original array\");\n      setFilteredTransactions(transactions);\n    } else {\n      const _filteredTransactions = transactions.filter((transaction) => {\n        return categories[transaction.category].checked === true;\n      });\n      setFilteredTransactions(_filteredTransactions);\n      // console.log(\"_filteredTransactions\", _filteredTransactions);\n    }\n  };\n\n  const filterByType = () => {\n    // we filter in our types state object\n    const checked = Object.keys(types).filter((type) => types[type].checked);\n\n    // if no checkbox is selected --> original array\n    // if some checkbox is checked --> filter\n\n    if (checked.length === 0) {\n      // console.log(\"go back to original array\");\n      setFilteredTransactions(transactions);\n    } else {\n      const _filteredTransactions = transactions.filter((transaction) => {\n        return types[transaction.type].checked === true;\n      });\n      setFilteredTransactions(_filteredTransactions);\n      // console.log(\"_filteredTransactions\", _filteredTransactions);\n    }\n  };\n\n  return (\n    <Container>\n      <ActionsWrapper>\n        <FormControl style={{ width: \"75%\" }}>\n          <Input\n            id='search'\n            value={search}\n            startAdornment={\n              <InputAdornment position='start'>\n                <SearchIcon />\n              </InputAdornment>\n            }\n            onChange={(event) => {\n              console.log(event.target.value);\n              setSearch(event.target.value);\n            }}\n          />\n        </FormControl>\n        <Button\n          variant='contained'\n          color='primary'\n          onClick={() => setOpenDrawer(true)}\n        >\n          + Add Transaction\n        </Button>\n      </ActionsWrapper>\n      <Main>\n        <FiltersContainer>\n          <h2>Filters</h2>\n          <h3>Category</h3>\n          {categories &&\n            Object.keys(categories).map((category) => {\n              return (\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={categories[category].checked}\n                      onChange={(event) => {\n                        const newCategoriesState = {\n                          ...categories, // make a copy of all the categories\n                          [category]: {\n                            //label: categories[category].label,\n                            ...categories[category], // we keep all the information of that category\n                            checked: event.target.checked, // we update the \"checked\" property\n                          },\n                        };\n                        // console.log(\"newCategoriesState\", newCategoriesState);\n                        setCategories(newCategoriesState);\n                      }}\n                      name={category}\n                    />\n                  }\n                  label={categories[category].label}\n                />\n              );\n            })}\n          <h3>Types</h3>\n          {types &&\n            Object.keys(types).map((type) => {\n              return (\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={types[type].checked}\n                      onChange={(event) => {\n                        const newTypesState = {\n                          ...types, // make a copy of all the Types\n                          [type]: {\n                            //label: Types[type].label,\n                            ...types[type], // we keep all the information of that type\n                            checked: event.target.checked, // we update the \"checked\" property\n                          },\n                        };\n                        console.log(\"newTypesState\", newTypesState);\n                        setTypes(newTypesState);\n                      }}\n                      name={type}\n                    />\n                  }\n                  label={types[type].label}\n                />\n              );\n            })}\n        </FiltersContainer>\n        {transactions.length > 0 ? (\n          <Table>\n            <thead>\n              <tr>\n                <HeadCell>Date</HeadCell>\n                <HeadCell>Name</HeadCell>\n                <HeadCell>Category</HeadCell>\n                <HeadCell>Amount</HeadCell>\n                <HeadCell></HeadCell>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredTransactions.map(\n                ({ id, date, name, category, type, amount }) => {\n                  return (\n                    <tr key={id}>\n                      <TableCell>{date}</TableCell>\n                      <TableCell>{name}</TableCell>\n                      <TableCell>{category.value}</TableCell>\n                      <TableCell>\n                        <Amount type={type.value}>\n                          {formatter.format(amount)}\n                        </Amount>\n                      </TableCell>\n                      <TableCell>\n                        <EditIcon\n                          style={{ marginRight: \"16px\" }}\n                          onClick={() => {\n                            handleEdit(id);\n                          }}\n                        />\n                        <DeleteForeverIcon\n                          style={{ color: \"#FF7661\" }}\n                          onClick={() => handleDelete(id)}\n                        />\n                      </TableCell>\n                    </tr>\n                  );\n                }\n              )}\n            </tbody>\n          </Table>\n        ) : (\n          \"Loading....\"\n        )}\n      </Main>\n      {openDrawer && (\n        <TransactionDrawer\n          mode={mode}\n          open={openDrawer}\n          onClose={() => setOpenDrawer(false)}\n          transaction={selectedTransaction}\n          addTransaction={addTransactionToList}\n          editTransaction={editTransaction}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport { TransactionsList };\n"]},"metadata":{},"sourceType":"module"}